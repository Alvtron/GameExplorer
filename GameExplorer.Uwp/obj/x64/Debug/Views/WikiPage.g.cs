#pragma checksum "C:\Users\thoma\source\repos\Game Explorer\Game Explorer\GameExplorer.Uwp\Views\WikiPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "3569BC067A02B2A0E9AACF1B747D4DAD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameExplorer.Uwp.Views
{
    partial class WikiPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_FrameworkElement_DataContext(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.DataContext = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(global::Windows.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_GameExplorer_Uwp_RichEditBoxExtended_RtfText(global::GameExplorer.Uwp.RichEditBoxExtended obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.RtfText = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PersonPicture_ProfilePicture(global::Windows.UI.Xaml.Controls.PersonPicture obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.ProfilePicture = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class WikiPage_obj6_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IWikiPage_Bindings
        {
            private global::GameExplorer.Model.Log dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Documents.Run obj8;
            private global::Windows.UI.Xaml.Documents.Run obj9;

            private WikiPage_obj6_BindingsTracking bindingsTracking;

            public WikiPage_obj6_Bindings()
            {
                this.bindingsTracking = new WikiPage_obj6_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\WikiPage.xaml line 170
                        this.obj6 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 7: // Views\WikiPage.xaml line 176
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Views\WikiPage.xaml line 172
                        this.obj8 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 9: // Views\WikiPage.xaml line 174
                        this.obj9 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj6.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GameExplorer.Model.Log) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IWikiPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GameExplorer.Model.Log)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GameExplorer.Model.Log obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Information(obj.Information, phase);
                        this.Update_Date(obj.Date, phase);
                        this.Update_User(obj.User, phase);
                    }
                }
            }
            private void Update_Information(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 176
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                }
            }
            private void Update_Date(global::System.Nullable<global::System.DateTime> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 172
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj8, obj.ToString(), null);
                }
            }
            private void Update_User(global::GameExplorer.Model.User obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_User(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 174
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj9, obj != null ? obj.ToString() : null, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class WikiPage_obj6_BindingsTracking
            {
                private global::System.WeakReference<WikiPage_obj6_Bindings> weakRefToBindingObj; 

                public WikiPage_obj6_BindingsTracking(WikiPage_obj6_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<WikiPage_obj6_Bindings>(obj);
                }

                public WikiPage_obj6_Bindings TryGetBindingObject()
                {
                    WikiPage_obj6_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_User(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Log obj = sender as global::GameExplorer.Model.Log;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Information(obj.Information, DATA_CHANGED);
                                bindings.Update_Date(obj.Date, DATA_CHANGED);
                                bindings.Update_User(obj.User, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Information":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Information(obj.Information, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Date":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Date(obj.Date, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "User":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_User(obj.User, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::GameExplorer.Model.Log obj)
                {
                    WikiPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_User(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.User obj = sender as global::GameExplorer.Model.User;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.User cache_User = null;
                public void UpdateChildListeners_User(global::GameExplorer.Model.User obj)
                {
                    if (obj != cache_User)
                    {
                        if (cache_User != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_User).PropertyChanged -= PropertyChanged_User;
                            cache_User = null;
                        }
                        if (obj != null)
                        {
                            cache_User = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_User;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class WikiPage_obj11_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IWikiPage_Bindings
        {
            private global::GameExplorer.Model.Comment dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj11;
            private global::Windows.UI.Xaml.Controls.PersonPicture obj12;
            private global::GameExplorer.Uwp.RichEditBoxExtended obj13;
            private global::Windows.UI.Xaml.Documents.Run obj14;
            private global::Windows.UI.Xaml.Documents.Run obj15;
            private global::Windows.UI.Xaml.Documents.Run obj16;

            private WikiPage_obj11_BindingsTracking bindingsTracking;

            public WikiPage_obj11_Bindings()
            {
                this.bindingsTracking = new WikiPage_obj11_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 11: // Views\WikiPage.xaml line 122
                        this.obj11 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 12: // Views\WikiPage.xaml line 133
                        this.obj12 = (global::Windows.UI.Xaml.Controls.PersonPicture)target;
                        break;
                    case 13: // Views\WikiPage.xaml line 141
                        this.obj13 = (global::GameExplorer.Uwp.RichEditBoxExtended)target;
                        break;
                    case 14: // Views\WikiPage.xaml line 148
                        this.obj14 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 15: // Views\WikiPage.xaml line 136
                        this.obj15 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 16: // Views\WikiPage.xaml line 138
                        this.obj16 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj11.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GameExplorer.Model.Comment) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IWikiPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GameExplorer.Model.Comment)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GameExplorer.Model.Comment obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_User(obj.User, phase);
                        this.Update_Message(obj.Message, phase);
                        this.Update_NumberOfLikes(obj.NumberOfLikes, phase);
                        this.Update_Created(obj.Created, phase);
                    }
                }
            }
            private void Update_User(global::GameExplorer.Model.User obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_User(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_User_Photo(obj.Photo, phase);
                        this.Update_User_Username(obj.Username, phase);
                    }
                }
            }
            private void Update_User_Photo(global::GameExplorer.Model.Image obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_User_Photo(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 133
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PersonPicture_ProfilePicture(this.obj12, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                }
            }
            private void Update_Message(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 141
                    XamlBindingSetters.Set_GameExplorer_Uwp_RichEditBoxExtended_RtfText(this.obj13, obj, null);
                }
            }
            private void Update_NumberOfLikes(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 148
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj14, obj.ToString(), null);
                }
            }
            private void Update_User_Username(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 136
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, obj, null);
                }
            }
            private void Update_Created(global::System.Nullable<global::System.DateTime> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 138
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj16, obj.ToString(), null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class WikiPage_obj11_BindingsTracking
            {
                private global::System.WeakReference<WikiPage_obj11_Bindings> weakRefToBindingObj; 

                public WikiPage_obj11_BindingsTracking(WikiPage_obj11_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<WikiPage_obj11_Bindings>(obj);
                }

                public WikiPage_obj11_Bindings TryGetBindingObject()
                {
                    WikiPage_obj11_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_User(null);
                    UpdateChildListeners_User_Photo(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Comment obj = sender as global::GameExplorer.Model.Comment;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_User(obj.User, DATA_CHANGED);
                                bindings.Update_Message(obj.Message, DATA_CHANGED);
                                bindings.Update_NumberOfLikes(obj.NumberOfLikes, DATA_CHANGED);
                                bindings.Update_Created(obj.Created, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "User":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_User(obj.User, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NumberOfLikes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NumberOfLikes(obj.NumberOfLikes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Created":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Created(obj.Created, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::GameExplorer.Model.Comment obj)
                {
                    WikiPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_User(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.User obj = sender as global::GameExplorer.Model.User;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_User_Photo(obj.Photo, DATA_CHANGED);
                                bindings.Update_User_Username(obj.Username, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Photo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_User_Photo(obj.Photo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Username":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_User_Username(obj.Username, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.User cache_User = null;
                public void UpdateChildListeners_User(global::GameExplorer.Model.User obj)
                {
                    if (obj != cache_User)
                    {
                        if (cache_User != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_User).PropertyChanged -= PropertyChanged_User;
                            cache_User = null;
                        }
                        if (obj != null)
                        {
                            cache_User = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_User;
                        }
                    }
                }
                public void PropertyChanged_User_Photo(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Image obj = sender as global::GameExplorer.Model.Image;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.Image cache_User_Photo = null;
                public void UpdateChildListeners_User_Photo(global::GameExplorer.Model.Image obj)
                {
                    if (obj != cache_User_Photo)
                    {
                        if (cache_User_Photo != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_User_Photo).PropertyChanged -= PropertyChanged_User_Photo;
                            cache_User_Photo = null;
                        }
                        if (obj != null)
                        {
                            cache_User_Photo = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_User_Photo;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class WikiPage_obj24_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IWikiPage_Bindings
        {
            private global::GameExplorer.Model.Image dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj24;
            private global::Windows.UI.Xaml.Controls.Image obj25;

            private WikiPage_obj24_BindingsTracking bindingsTracking;

            public WikiPage_obj24_Bindings()
            {
                this.bindingsTracking = new WikiPage_obj24_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 24: // Views\WikiPage.xaml line 82
                        this.obj24 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 25: // Views\WikiPage.xaml line 83
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj24.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GameExplorer.Model.Image) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IWikiPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GameExplorer.Model.Image)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GameExplorer.Model.Image obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ImageInBytes(obj.ImageInBytes, phase);
                    }
                }
            }
            private void Update_ImageInBytes(global::System.Byte[] obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 83
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj25, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class WikiPage_obj24_BindingsTracking
            {
                private global::System.WeakReference<WikiPage_obj24_Bindings> weakRefToBindingObj; 

                public WikiPage_obj24_BindingsTracking(WikiPage_obj24_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<WikiPage_obj24_Bindings>(obj);
                }

                public WikiPage_obj24_Bindings TryGetBindingObject()
                {
                    WikiPage_obj24_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj24_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Image obj = sender as global::GameExplorer.Model.Image;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ImageInBytes(obj.ImageInBytes, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ImageInBytes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ImageInBytes(obj.ImageInBytes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::GameExplorer.Model.Image obj)
                {
                    WikiPage_obj24_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class WikiPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IWikiPage_Bindings
        {
            private global::GameExplorer.Uwp.Views.WikiPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj1;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj2;
            private global::Windows.UI.Xaml.Controls.Image obj3;
            private global::Windows.UI.Xaml.Controls.ListView obj5;
            private global::Windows.UI.Xaml.Controls.ListView obj10;
            private global::Windows.UI.Xaml.Controls.Button obj18;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj19;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj20;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj21;
            private global::Windows.UI.Xaml.Controls.GridView obj22;
            private global::Windows.UI.Xaml.Controls.GridView obj23;
            private global::GameExplorer.Uwp.RichEditBoxExtended obj26;
            private global::Windows.UI.Xaml.Controls.Image obj27;
            private global::Windows.UI.Xaml.Controls.Button obj28;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Documents.Run obj30;

            private WikiPage_obj1_BindingsTracking bindingsTracking;

            public WikiPage_obj1_Bindings()
            {
                this.bindingsTracking = new WikiPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 1: // Views\WikiPage.xaml line 1
                        this.obj1 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Page)target);
                        break;
                    case 2: // Views\WikiPage.xaml line 23
                        this.obj2 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 3: // Views\WikiPage.xaml line 27
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 5: // Views\WikiPage.xaml line 167
                        this.obj5 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 10: // Views\WikiPage.xaml line 119
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 18: // Views\WikiPage.xaml line 116
                        this.obj18 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 19: // Views\WikiPage.xaml line 111
                        this.obj19 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 20: // Views\WikiPage.xaml line 112
                        this.obj20 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 21: // Views\WikiPage.xaml line 113
                        this.obj21 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 22: // Views\WikiPage.xaml line 79
                        this.obj22 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 23: // Views\WikiPage.xaml line 91
                        this.obj23 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 26: // Views\WikiPage.xaml line 69
                        this.obj26 = (global::GameExplorer.Uwp.RichEditBoxExtended)target;
                        break;
                    case 27: // Views\WikiPage.xaml line 39
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 28: // Views\WikiPage.xaml line 48
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 29: // Views\WikiPage.xaml line 56
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 30: // Views\WikiPage.xaml line 59
                        this.obj30 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            // IWikiPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GameExplorer.Uwp.Views.WikiPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GameExplorer.Uwp.Views.WikiPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::GameExplorer.Uwp.ViewModels.WikiViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Enabled(obj.Enabled, phase);
                        this.Update_ViewModel_Lock(obj.Lock, phase);
                        this.Update_ViewModel_Wiki(obj.Wiki, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UploadCommentCommand(obj.UploadCommentCommand, phase);
                        this.Update_ViewModel_BoldCommand(obj.BoldCommand, phase);
                        this.Update_ViewModel_ItalicCommand(obj.ItalicCommand, phase);
                        this.Update_ViewModel_UnderlineCommand(obj.UnderlineCommand, phase);
                        this.Update_ViewModel_EditCommand(obj.EditCommand, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 1
                    if ((this.obj1.Target as global::Windows.UI.Xaml.Controls.Page) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_DataContext((this.obj1.Target as global::Windows.UI.Xaml.Controls.Page), obj, null);
                    }
                }
            }
            private void Update_ViewModel_Enabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 1
                    if ((this.obj1.Target as global::Windows.UI.Xaml.Controls.Page) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled((this.obj1.Target as global::Windows.UI.Xaml.Controls.Page), obj);
                    }
                }
            }
            private void Update_ViewModel_Lock(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 23
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj2, obj);
                }
            }
            private void Update_ViewModel_Wiki(global::GameExplorer.Model.Wiki obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Wiki_Banner(obj.Banner, phase);
                        this.Update_ViewModel_Wiki_HasBanner(obj.HasBanner, phase);
                        this.Update_ViewModel_Wiki_Logs(obj.Logs, phase);
                        this.Update_ViewModel_Wiki_Comments(obj.Comments, phase);
                        this.Update_ViewModel_Wiki_Screenshots(obj.Screenshots, phase);
                        this.Update_ViewModel_Wiki_Videos(obj.Videos, phase);
                        this.Update_ViewModel_Wiki_About(obj.About, phase);
                        this.Update_ViewModel_Wiki_Photo(obj.Photo, phase);
                        this.Update_ViewModel_Wiki_Title(obj.Title, phase);
                        this.Update_ViewModel_Wiki_Updated(obj.Updated, phase);
                    }
                }
            }
            private void Update_ViewModel_Wiki_Banner(global::GameExplorer.Model.Image obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Banner(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 27
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj3, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                }
            }
            private void Update_ViewModel_Wiki_HasBanner(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 27
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibillityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Wiki_Logs(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Logs(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 167
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj5, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Comments(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Comments(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                }
            }
            private void Update_ViewModel_UploadCommentCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 116
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj18, obj, null);
                }
            }
            private void Update_ViewModel_BoldCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 111
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj19, obj, null);
                }
            }
            private void Update_ViewModel_ItalicCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 112
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj20, obj, null);
                }
            }
            private void Update_ViewModel_UnderlineCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 113
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj21, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Screenshots(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Screenshots(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 79
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj22, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Videos(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Videos(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 91
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj23, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_About(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 69
                    XamlBindingSetters.Set_GameExplorer_Uwp_RichEditBoxExtended_RtfText(this.obj26, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Photo(global::GameExplorer.Model.Image obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Wiki_Photo(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 39
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj27, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                }
            }
            private void Update_ViewModel_EditCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\WikiPage.xaml line 48
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj28, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 56
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, obj, null);
                }
            }
            private void Update_ViewModel_Wiki_Updated(global::System.Nullable<global::System.DateTime> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\WikiPage.xaml line 59
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj30, obj.ToString(), null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class WikiPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<WikiPage_obj1_Bindings> weakRefToBindingObj; 

                public WikiPage_obj1_BindingsTracking(WikiPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<WikiPage_obj1_Bindings>(obj);
                }

                public WikiPage_obj1_Bindings TryGetBindingObject()
                {
                    WikiPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Wiki(null);
                    UpdateChildListeners_ViewModel_Wiki_Banner(null);
                    UpdateChildListeners_ViewModel_Wiki_Logs(null);
                    UpdateChildListeners_ViewModel_Wiki_Comments(null);
                    UpdateChildListeners_ViewModel_Wiki_Screenshots(null);
                    UpdateChildListeners_ViewModel_Wiki_Videos(null);
                    UpdateChildListeners_ViewModel_Wiki_Photo(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Uwp.ViewModels.WikiViewModel obj = sender as global::GameExplorer.Uwp.ViewModels.WikiViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Enabled(obj.Enabled, DATA_CHANGED);
                                bindings.Update_ViewModel_Lock(obj.Lock, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki(obj.Wiki, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Enabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Enabled(obj.Enabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Lock":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Lock(obj.Lock, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Wiki":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki(obj.Wiki, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Uwp.ViewModels.WikiViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::GameExplorer.Uwp.ViewModels.WikiViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Wiki obj = sender as global::GameExplorer.Model.Wiki;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Wiki_Banner(obj.Banner, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_HasBanner(obj.HasBanner, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Logs(obj.Logs, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Comments(obj.Comments, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Screenshots(obj.Screenshots, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Videos(obj.Videos, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_About(obj.About, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Photo(obj.Photo, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_ViewModel_Wiki_Updated(obj.Updated, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Banner":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Banner(obj.Banner, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HasBanner":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_HasBanner(obj.HasBanner, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Logs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Logs(obj.Logs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Comments":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Comments(obj.Comments, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Screenshots":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Screenshots(obj.Screenshots, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Videos":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Videos(obj.Videos, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "About":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_About(obj.About, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Photo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Photo(obj.Photo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Updated":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Wiki_Updated(obj.Updated, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.Wiki cache_ViewModel_Wiki = null;
                public void UpdateChildListeners_ViewModel_Wiki(global::GameExplorer.Model.Wiki obj)
                {
                    if (obj != cache_ViewModel_Wiki)
                    {
                        if (cache_ViewModel_Wiki != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki).PropertyChanged -= PropertyChanged_ViewModel_Wiki;
                            cache_ViewModel_Wiki = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Banner(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Image obj = sender as global::GameExplorer.Model.Image;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.Image cache_ViewModel_Wiki_Banner = null;
                public void UpdateChildListeners_ViewModel_Wiki_Banner(global::GameExplorer.Model.Image obj)
                {
                    if (obj != cache_ViewModel_Wiki_Banner)
                    {
                        if (cache_ViewModel_Wiki_Banner != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Banner).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Banner;
                            cache_ViewModel_Wiki_Banner = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Banner = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Banner;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Logs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Wiki_Logs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log> cache_ViewModel_Wiki_Logs = null;
                public void UpdateChildListeners_ViewModel_Wiki_Logs(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Log> obj)
                {
                    if (obj != cache_ViewModel_Wiki_Logs)
                    {
                        if (cache_ViewModel_Wiki_Logs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Logs).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Logs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Wiki_Logs).CollectionChanged -= CollectionChanged_ViewModel_Wiki_Logs;
                            cache_ViewModel_Wiki_Logs = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Logs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Logs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Wiki_Logs;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Comments(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Wiki_Comments(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment> cache_ViewModel_Wiki_Comments = null;
                public void UpdateChildListeners_ViewModel_Wiki_Comments(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Comment> obj)
                {
                    if (obj != cache_ViewModel_Wiki_Comments)
                    {
                        if (cache_ViewModel_Wiki_Comments != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Comments).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Comments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Wiki_Comments).CollectionChanged -= CollectionChanged_ViewModel_Wiki_Comments;
                            cache_ViewModel_Wiki_Comments = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Comments = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Comments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Wiki_Comments;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Screenshots(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Wiki_Screenshots(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image> cache_ViewModel_Wiki_Screenshots = null;
                public void UpdateChildListeners_ViewModel_Wiki_Screenshots(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Image> obj)
                {
                    if (obj != cache_ViewModel_Wiki_Screenshots)
                    {
                        if (cache_ViewModel_Wiki_Screenshots != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Screenshots).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Screenshots;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Wiki_Screenshots).CollectionChanged -= CollectionChanged_ViewModel_Wiki_Screenshots;
                            cache_ViewModel_Wiki_Screenshots = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Screenshots = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Screenshots;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Wiki_Screenshots;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Videos(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Wiki_Videos(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video> cache_ViewModel_Wiki_Videos = null;
                public void UpdateChildListeners_ViewModel_Wiki_Videos(global::System.Collections.ObjectModel.ObservableCollection<global::GameExplorer.Model.Video> obj)
                {
                    if (obj != cache_ViewModel_Wiki_Videos)
                    {
                        if (cache_ViewModel_Wiki_Videos != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Videos).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Videos;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Wiki_Videos).CollectionChanged -= CollectionChanged_ViewModel_Wiki_Videos;
                            cache_ViewModel_Wiki_Videos = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Videos = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Videos;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Wiki_Videos;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Wiki_Photo(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    WikiPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GameExplorer.Model.Image obj = sender as global::GameExplorer.Model.Image;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GameExplorer.Model.Image cache_ViewModel_Wiki_Photo = null;
                public void UpdateChildListeners_ViewModel_Wiki_Photo(global::GameExplorer.Model.Image obj)
                {
                    if (obj != cache_ViewModel_Wiki_Photo)
                    {
                        if (cache_ViewModel_Wiki_Photo != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Wiki_Photo).PropertyChanged -= PropertyChanged_ViewModel_Wiki_Photo;
                            cache_ViewModel_Wiki_Photo = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Wiki_Photo = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Wiki_Photo;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\WikiPage.xaml line 1
                {
                    this.ViewModelRoot = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 4: // Views\WikiPage.xaml line 37
                {
                    this.Info = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 17: // Views\WikiPage.xaml line 115
                {
                    this.NewCommentBox = (global::GameExplorer.Uwp.RichEditBoxExtended)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\WikiPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    WikiPage_obj1_Bindings bindings = new WikiPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 6: // Views\WikiPage.xaml line 170
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element6 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    WikiPage_obj6_Bindings bindings = new WikiPage_obj6_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element6.DataContext);
                    element6.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element6, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element6, bindings);
                }
                break;
            case 11: // Views\WikiPage.xaml line 122
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element11 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    WikiPage_obj11_Bindings bindings = new WikiPage_obj11_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element11.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element11.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element11, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element11, bindings);
                }
                break;
            case 24: // Views\WikiPage.xaml line 82
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element24 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    WikiPage_obj24_Bindings bindings = new WikiPage_obj24_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element24.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element24.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element24, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element24, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

